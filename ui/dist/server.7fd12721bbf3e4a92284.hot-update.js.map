{"version":3,"sources":["webpack:///./src/graphQLFetch.js"],"names":["dateRegex","RegExp","jsonDateReviver","key","value","test","Date","graphQLFetch","query","variables","showError","cookie","apiEndpoint","__isBrowser__","window","process","env","UI_SERVER_API_ENDPOINT","headers","Cookie","response","fetch","method","credentials","body","JSON","stringify","text","result","parse","errors","error","extensions","code","details","exception","join","message","data","e"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAMA,SAAS,GAAG,IAAIC,MAAJ,CAAW,6BAAX,CAAlB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AACjC,MAAIJ,SAAS,CAACK,IAAV,CAAeD,KAAf,CAAJ,EAA2B,OAAO,IAAIE,IAAJ,CAASF,KAAT,CAAP;AAC3B,SAAOA,KAAP;AACH;;AAEc,eACXG,YADW,CACEC,KADF,EACSC,SAAS,GAAG,EADrB,EACyBC,SAAS,GAAG,IADrC,EAC2CC,MAAM,GAAG,IADpD,EAC0D;AACrE,QAAMC,WAAW,GAAIC,MAAD,GAAgB;AAC9BC,WADc,GAEdC,OAAO,CAACC,GAAR,CAAYC,sBAFlB;;AAGA,MAAI;AACA,UAAMC,OAAO,GAAG;AAAE,sBAAgB;AAAlB,KAAhB;AACA,QAAIP,MAAJ,EAAYO,OAAO,CAACC,MAAR,GAAiBR,MAAjB;AACZ,UAAMS,QAAQ,GAAG,MAAMC,uDAAK,CAACT,WAAD,EAAc;AACtCU,YAAM,EAAE,MAD8B;AAEtCC,iBAAW,EAAE,SAFyB;AAGtCL,aAHsC;AAItCM,UAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAElB,aAAF;AAASC;AAAT,OAAf;AAJgC,KAAd,CAA5B;AAMA,UAAMe,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAAnB;AACA,UAAMC,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,IAAX,EAAiBtB,eAAjB,CAAf;;AAEA,QAAI0B,MAAM,CAACE,MAAX,EAAmB;AACf,YAAMC,KAAK,GAAGH,MAAM,CAACE,MAAP,CAAc,CAAd,CAAd;;AACA,UAAIC,KAAK,CAACC,UAAN,CAAiBC,IAAjB,KAA0B,gBAA9B,EAAgD;AAC5C,cAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBG,SAAjB,CAA2BL,MAA3B,CAAkCM,IAAlC,CAAuC,KAAvC,CAAhB;AACA,YAAI1B,SAAJ,EAAeA,SAAS,CAAE,GAAEqB,KAAK,CAACM,OAAQ,OAAMH,OAAQ,EAAhC,CAAT;AAClB,OAHD,MAGO,IAAIxB,SAAJ,EAAe;AAClBA,iBAAS,CAAE,GAAEqB,KAAK,CAACC,UAAN,CAAiBC,IAAK,KAAIF,KAAK,CAACM,OAAQ,EAA5C,CAAT;AACH;AACJ;;AACD,WAAOT,MAAM,CAACU,IAAd;AACH,GAtBD,CAsBE,OAAOC,CAAP,EAAU;AACR,QAAI7B,SAAJ,EAAeA,SAAS,CAAE,oCAAmC6B,CAAC,CAACF,OAAQ,EAA/C,CAAT;AACf,WAAO,IAAP;AACH;AACJ,C","file":"server.7fd12721bbf3e4a92284.hot-update.js","sourcesContent":["import fetch from 'isomorphic-fetch';\n\nconst dateRegex = new RegExp('^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d');\n\nfunction jsonDateReviver(key, value) {\n    if (dateRegex.test(value)) return new Date(value);\n    return value;\n}\n\nexport default async function\n    graphQLFetch(query, variables = {}, showError = null, cookie = null) {\n    const apiEndpoint = (__isBrowser__) // eslint-disable-line no-undef\n        ? window.ENV.UI_API_ENDPOINT\n        : process.env.UI_SERVER_API_ENDPOINT;\n    try {\n        const headers = { 'Content-Type': 'application/json' };\n        if (cookie) headers.Cookie = cookie;\n        const response = await fetch(apiEndpoint, {\n            method: 'POST',\n            credentials: 'include',\n            headers,\n            body: JSON.stringify({ query, variables }),\n        });\n        const body = await response.text();\n        const result = JSON.parse(body, jsonDateReviver);\n\n        if (result.errors) {\n            const error = result.errors[0];\n            if (error.extensions.code === 'BAD_USER_INPUT') {\n                const details = error.extensions.exception.errors.join('\\n ');\n                if (showError) showError(`${error.message}:\\n ${details}`);\n            } else if (showError) {\n                showError(`${error.extensions.code}: ${error.message}`);\n            }\n        }\n        return result.data;\n    } catch (e) {\n        if (showError) showError(`Error in sending data to server: ${e.message}`);\n        return null;\n    }\n}"],"sourceRoot":""}