{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["IssueList","React","Component","fetchData","match","search","showError","params","URLSearchParams","vars","hasSelection","selectedId","get","status","effortMin","parseInt","Number","isNaN","effortMax","id","idInt","query","data","graphQLFetch","constructor","issues","store","initialData","issueList","selectedIssue","issue","state","closeIssue","bind","deleteIssue","componentDidMount","loadData","componentDidUpdate","prevProps","location","prevSearch","prevId","props","setState","index","prevState","newList","issueUpdate","pathname","history","showSuccess","issueDelete","push","splice","render","IssueListWithToast","withToast"],"mappings":"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","file":"server.4ced617c21ee8bd12000.hot-update.js","sourcesContent":["import React from 'react';\nimport URLSearchParams from 'url-search-params';\nimport { Panel } from 'react-bootstrap';\n\nimport IssueFilter from './IssueFilter.jsx';\nimport IssueTable from './IssueTable.jsx';\nimport IssueDetail from './IssueDetail.jsx';\nimport graphQLFetch from './graphQLFetch.js';\nimport withToast from './withToast.jsx';\nimport store from './store.js';\n\nclass IssueList extends React.Component {\n    static async fetchData(match, search, showError) {\n        const params = new URLSearchParams(search);\n        const vars = { hasSelection: false, selectedId: 0 };\n        if (params.get('status')) vars.status = params.get('status');\n\n        const effortMin = parseInt(params.get('effortMin'), 10);\n        if (!Number.isNaN(effortMin)) vars.effortMin = effortMin;\n        const effortMax = parseInt(params.get('effortMax'), 10);\n        if (!Number.isNaN(effortMax)) vars.effortMax = effortMax;\n\n        const { params: { id } } = match;\n        const idInt = parseInt(id, 10);\n        if (!Number.isNaN(idInt)) {\n            vars.hasSelection = true;\n            vars.selectedId = idInt;\n        }\n\n        const query = `query issueList(\n      $status: StatusType\n      $effortMin: Int\n      $effortMax: Int\n      $hasSelection: Boolean!\n      $selectedId: Int!\n    ) {\n      issueList(\n        status: $status\n        effortMin: $effortMin\n        effortMax: $effortMax\n      ) {\n        id title status owner\n        created effort due\n      }\n      issue(id: $selectedId) @include (if : $hasSelection) {\n        id description\n      }\n    }`;\n\n        const data = await graphQLFetch(query, vars, showError);\n        return data;\n    }\n\n    constructor() {\n        super();\n        const issues = store.initialData ? store.initialData.issueList : null;\n        const selectedIssue = store.initialData\n            ? store.initialData.issue\n            : null;\n        delete store.initialData;\n        this.state = {\n            issues,\n            selectedIssue,\n        };\n        this.closeIssue = this.closeIssue.bind(this);\n        this.deleteIssue = this.deleteIssue.bind(this);\n    }\n\n    componentDidMount() {\n        const { issues } = this.state;\n        if (issues == null) this.loadData();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            location: { search: prevSearch },\n            match: { params: { id: prevId } },\n        } = prevProps;\n        const { location: { search }, match: { params: { id } } } = this.props;\n        if (prevSearch !== search || prevId !== id) {\n            this.loadData();\n        }\n    }\n\n    async loadData() {\n        const { location: { search }, match, showError } = this.props;\n        const data = await IssueList.fetchData(match, search, showError);\n        if (data) {\n            this.setState({ issues: data.issueList, selectedIssue: data.issue });\n        }\n    }\n\n    async closeIssue(index) {\n        const query = `mutation issueClose($id: Int!) {\n      issueUpdate(id: $id, changes: { status: Closed }) {\n        id title status owner\n        effort created due description\n      }\n    }`;\n        const { issues } = this.state;\n        const { showError } = this.props;\n        const data = await graphQLFetch(query, { id: issues[index].id },\n            showError);\n        if (data) {\n            this.setState((prevState) => {\n                const newList = [...prevState.issues];\n                newList[index] = data.issueUpdate;\n                return { issues: newList };\n            });\n        } else {\n            this.loadData();\n        }\n    }\n\n    async deleteIssue(index) {\n        const query = `mutation issueDelete($id: Int!) {\n      issueDelete(id: $id)\n    }`;\n        const { issues } = this.state;\n        const { location: { pathname, search }, history } = this.props;\n        const { showSuccess, showError } = this.props;\n        const { id } = issues[index];\n        const data = await graphQLFetch(query, { id }, showError);\n        if (data && data.issueDelete) {\n            this.setState((prevState) => {\n                const newList = [...prevState.issues];\n                if (pathname === `/issues/${id}`) {\n                    history.push({ pathname: '/issues', search });\n                }\n                newList.splice(index, 1);\n                return { issues: newList };\n            });\n            showSuccess(`Deleted issue ${id} successfully.`);\n        } else {\n            this.loadData();\n        }\n    }\n\n    render() {\n        const { issues } = this.state;\n        if (issues == null) return null;\n\n        const { selectedIssue } = this.state;\n        return (\n            <React.Fragment>\n                <Panel>\n                    <Panel.Heading>\n                        <Panel.Title toggle>Filter</Panel.Title>\n                    </Panel.Heading>\n                    <Panel.Body collapsible>\n                        <IssueFilter urlBase=\"/issues\"/>\n                    </Panel.Body>\n                </Panel>\n                <IssueTable\n                    issues={issues}\n                    closeIssue={this.closeIssue}\n                    deleteIssue={this.deleteIssue}\n                />\n                <IssueDetail issue={selectedIssue} />\n            </React.Fragment>\n        );\n    }\n}\n\nconst IssueListWithToast = withToast(IssueList);\nIssueListWithToast.fetchData = IssueList.fetchData;\n\nexport default IssueListWithToast;"],"sourceRoot":""}